generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
}

model User {
  id        Int     @default(autoincrement()) @id
  email     String  @unique
  firstName String?
  lastName  String?
  social    Json?
  // Relation fields
  meetings     MeetingRegistration[]
  tokens      Token[]
}

model Token {
  id         Int       @default(autoincrement()) @id
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tokenType  TokenType       
  emailToken String?   @unique // Only used for short lived email tokens
  valid      Boolean   @default(true)
  expiration DateTime
  // Relation fields
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Meeting {
    id            Int     @default(autoincrement()) @id
    theme          String
    title          String
    meetingDetails String
    hostId      Int @unique
    // Relation fields
    meetingCredentialId Int
    MeetingCredential MeetingCredential @relation(fields: [meetingCredentialId],references:[id])
    User User @relation(fields: [hostId],references:[id])
    participants MeetingRegistration[]
}


model MeetingRegistration {
  createdAt DateTime @default(now())
  // Relation Fields
  userId   Int
  meetingId Int
  user     User   @relation(fields: [userId], references: [id])
  Meeting   Meeting @relation(fields: [meetingId], references: [id])
  @@id([userId, meetingId])
  @@index([userId ])
}

model MeetingCredential {
  id        Int     @default(autoincrement()) @id
  meetingEntryId String @unique
  meetingPwd String
  meetingRoomId Int
  MeetingRoom MeetingRoom @relation(fields: [meetingRoomId],references:[id])
}

model MeetingRoom {
  id Int @default(autoincrement()) @id
  hostId Int
  open Boolean @default(false)
  User User @relation(fields: [hostId],references:[id])
}

enum UserRole {
  HOST
  PARTICIPANT
}

enum TokenType {
  EMAIL // used as a short lived token sent to the user's email
  API
}